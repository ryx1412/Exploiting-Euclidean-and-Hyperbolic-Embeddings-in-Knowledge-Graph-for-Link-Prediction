import numpy as np
import pickle
import os
import argparse
from train import load_data
import time
from time import sleep
import sys

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import StratifiedKFold
from sklearn.neural_network import MLPClassifier

PROJECT_ROOT_DIR = './../'
DATA_PATH = os.path.join(PROJECT_ROOT_DIR, 'data')
PROCESSED_DATA_PATH = os.path.join(PROJECT_ROOT_DIR, 'processed_data')
FINAL_MODEL_PATH = os.path.join(PROCESSED_DATA_PATH, 'final_model')

def kfoldsplit(X_data, y_data, n = 5):
    skf = StratifiedKFold(n_splits = n)
    train_indices = []
    test_indices = []

    for train_index, test_index in skf.split(X_data, y_data):
        train_indices.append(train_index)
        test_indices.append(test_index)

    return train_indices, test_indices

def train(X_data, y_data):
    mlp_clf = MLPClassifier(hidden_layer_sizes = (64, 32), alpha = 0.001, verbose = True)
    mlp_clf.fit(X_data, y_data)
    return mlp_clf

def main():
    parser = argparse.ArgumentParser(description='Train')
    parser.add_argument('-d', default = 64, type = int, help='embedding dimension for concepts (16, 64, 128)')
    parser.add_argument('-c', default = 'n')
    parser.add_argument('-p', default = 'p')
    opt = parser.parse_args()

    X_data, y_data = load_data(opt.d, opt.c, opt.p)
    scaler = StandardScaler()
    X_numerical, X_embedding = X_data[:, :5], X_data[:, 5:]
    X_numerical = scaler.fit_transform(X_numerical)
    X_data = np.concatenate((X_numerical, X_embedding), axis = 1)
    with open(os.path.join(FINAL_MODEL_PATH, 'scaler_final.pkl'), 'wb') as file:
        pickle.dump(scaler, file)

    train_indices, test_indices = kfoldsplit(X_data, y_data)

    print('Start to train models...')

    for idx in range(len(train_indices)):
        train_index, test_index = train_indices[idx], test_indices[idx]
        print(f'Start to train the {idx+1}-th model...')
        model = train(X_data[train_index], y_data[train_index])
        save_dict = dict()
        save_dict['model'] = model
        save_dict['train_indices'] = train_indices
        save_dict['test_indices'] = test_indices
        with open(os.path.join(FINAL_MODEL_PATH, f'cv_models_{idx}.pkl'), 'wb') as file:
            pickle.dump(save_dict, file)



if __name__ == '__main__':
    main()
